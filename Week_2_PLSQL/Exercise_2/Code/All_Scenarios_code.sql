/* 1) Remove the old table */
DROP TABLE ERROR_LOG PURGE;

/* 2) Create the table with the column names your procedure expects */
CREATE TABLE ERROR_LOG (
    LOG_ID      NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    PROC_NAME   VARCHAR2(50),
    ERR_CODE    NUMBER,
    ERR_MESSAGE VARCHAR2(4000),  
    LOG_TS      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE PROCEDURE LOG_ERROR (
    P_PROC_NAME IN VARCHAR2,
    P_ERR_CODE  IN NUMBER,
    P_ERR_MSG   IN VARCHAR2
) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO ERROR_LOG (
        PROC_NAME,
        ERR_CODE,
        ERR_MESSAGE
    ) VALUES ( P_PROC_NAME,
               P_ERR_CODE,
               P_ERR_MSG );

    COMMIT;                        
/

/* 
   1. Scenario 1 – SafeTransferFunds Procedure
 */
CREATE OR REPLACE PROCEDURE SAFETRANSFERFUNDS (
    P_FROM_ACCT IN NUMBER,
    P_TO_ACCT   IN NUMBER,
    P_AMOUNT    IN NUMBER
) IS
    V_FROM_BAL NUMBER;
BEGIN
    SELECT
        BALANCE
    INTO V_FROM_BAL
    FROM
        ACCOUNTS
    WHERE
        ACCOUNT_ID = P_FROM_ACCT
    FOR UPDATE;

    IF V_FROM_BAL < P_AMOUNT THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in source account');
    END IF;
    UPDATE ACCOUNTS
    SET
        BALANCE = BALANCE - P_AMOUNT
    WHERE
        ACCOUNT_ID = P_FROM_ACCT;

    UPDATE ACCOUNTS
    SET
        BALANCE = BALANCE + P_AMOUNT
    WHERE
        ACCOUNT_ID = P_TO_ACCT;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        LOG_ERROR('SafeTransferFunds', SQLCODE, SQLERRM);
        ROLLBACK;
        RAISE;
END;
/

/* 
   2. Scenario 2 – UpdateSalary Procedure
 */
CREATE OR REPLACE PROCEDURE UPDATESALARY (
    P_EMP_ID    IN NUMBER,
    P_PCT_RAISE IN NUMBER
) IS
BEGIN
    UPDATE EMPLOYEES
    SET
        SALARY = SALARY * ( 1 + P_PCT_RAISE / 100 )
    WHERE
        EMPLOYEE_ID = P_EMP_ID;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Employee ID does not exist');
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        LOG_ERROR('UpdateSalary', SQLCODE, SQLERRM);
        ROLLBACK;
        RAISE;
END;
/

/* 
   3. Scenario 3 – AddNewCustomer Procedure
*/
CREATE OR REPLACE PROCEDURE ADDNEWCUSTOMER (
    P_CUST_ID IN NUMBER,
    P_NAME    IN VARCHAR2,
    P_ADDRESS IN VARCHAR2,
    P_PHONE   IN VARCHAR2
) IS
BEGIN
    INSERT INTO CUSTOMERS (
        CUSTOMER_ID,
        NAME,
        ADDRESS,
        PHONE
    ) VALUES ( P_CUST_ID,
               P_NAME,
               P_ADDRESS,
               P_PHONE );

    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LOG_ERROR('AddNewCustomer', SQLCODE, 'Customer ID already exists – insertion prevented');
        ROLLBACK;
    WHEN OTHERS THEN
        LOG_ERROR('AddNewCustomer', SQLCODE, SQLERRM);
        ROLLBACK;
        RAISE;
END;
/
-- If not yet created, create minimal required tables and data
CREATE TABLE ACCOUNTS (
    ACCOUNT_ID NUMBER PRIMARY KEY,
    BALANCE    NUMBER
);

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID NUMBER PRIMARY KEY,
    SALARY      NUMBER
);

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    NAME        VARCHAR2(100),
    ADDRESS     VARCHAR2(255),
    PHONE       VARCHAR2(20)
);

-- Insert sample data
INSERT INTO ACCOUNTS VALUES ( 101,
                              50000 ); -- ₹50K
INSERT INTO ACCOUNTS VALUES ( 202,
                              25000 ); -- ₹25K
INSERT INTO EMPLOYEES VALUES ( 9001,
                               600000 ); -- ₹6L
COMMIT;
-- Check the data after test
SELECT
    *
FROM
    ACCOUNTS;

SELECT
    *
FROM
    EMPLOYEES;

SELECT
    *
FROM
    CUSTOMERS;

-- Check logged errors (if any)
SELECT
    *
FROM
    ERROR_LOG
ORDER BY
    LOG_ID DESC;