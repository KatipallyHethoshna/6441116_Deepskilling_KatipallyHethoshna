-- Drop the table if it exists
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE employees PURGE';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Then create the table
CREATE TABLE employees (
    emp_id        NUMBER PRIMARY KEY,
    name          VARCHAR2(50),
    salary        NUMBER(10,2),
    department_id NUMBER
);

DROP TABLE error_log PURGE;

CREATE TABLE error_log (
    log_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    proc_name   VARCHAR2(50),
    err_code    NUMBER,
    err_message VARCHAR2(4000),
    log_ts      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE PROCEDURE log_error (
    p_proc_name IN VARCHAR2,
    p_err_code  IN NUMBER,
    p_err_msg   IN VARCHAR2
) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO error_log (proc_name, err_code, err_message)
    VALUES (p_proc_name, p_err_code, p_err_msg);
    COMMIT;
END log_error;
/

CREATE OR REPLACE PACKAGE EmployeeManagement IS
    PROCEDURE HireEmployee (
        p_emp_id        IN NUMBER,
        p_name          IN VARCHAR2,
        p_salary        IN NUMBER,
        p_department_id IN NUMBER
    );

    PROCEDURE UpdateEmployee (
        p_emp_id        IN NUMBER,
        p_name          IN VARCHAR2 DEFAULT NULL,
        p_salary        IN NUMBER   DEFAULT NULL,
        p_department_id IN NUMBER   DEFAULT NULL
    );

    FUNCTION CalcAnnualSalary (
        p_emp_id IN NUMBER
    ) RETURN NUMBER;
END EmployeeManagement;
/

CREATE OR REPLACE PACKAGE BODY EmployeeManagement IS

    PROCEDURE HireEmployee (
        p_emp_id        IN NUMBER,
        p_name          IN VARCHAR2,
        p_salary        IN NUMBER,
        p_department_id IN NUMBER
    ) IS
    BEGIN
        INSERT INTO employees
              (emp_id, name, salary, department_id)
        VALUES (p_emp_id, p_name, p_salary, p_department_id);

        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            log_error('EmployeeManagement.HireEmployee', SQLCODE, 'Employee already exists');
            RAISE_APPLICATION_ERROR(-20700, 'Employee '||p_emp_id||' already exists');
        WHEN OTHERS THEN
            log_error('EmployeeManagement.HireEmployee', SQLCODE, SQLERRM);
            ROLLBACK; RAISE;
    END HireEmployee;

    PROCEDURE UpdateEmployee (
        p_emp_id        IN NUMBER,
        p_name          IN VARCHAR2 DEFAULT NULL,
        p_salary        IN NUMBER   DEFAULT NULL,
        p_department_id IN NUMBER   DEFAULT NULL
    ) IS
    BEGIN
        UPDATE employees
           SET name          = COALESCE(p_name, name),
               salary        = COALESCE(p_salary, salary),
               department_id = COALESCE(p_department_id, department_id)
         WHERE emp_id = p_emp_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20701, 'Employee '||p_emp_id||' not found');
        END IF;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            log_error('EmployeeManagement.UpdateEmployee', SQLCODE, SQLERRM);
            ROLLBACK; RAISE;
    END UpdateEmployee;

    FUNCTION CalcAnnualSalary (
        p_emp_id IN NUMBER
    ) RETURN NUMBER IS
        v_sal NUMBER;
    BEGIN
        SELECT salary INTO v_sal
        FROM employees
        WHERE emp_id = p_emp_id;

        RETURN v_sal * 12;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
        WHEN OTHERS THEN
            log_error('EmployeeManagement.CalcAnnualSalary', SQLCODE, SQLERRM);
            RETURN NULL;
    END CalcAnnualSalary;

END EmployeeManagement;
/

SET SERVEROUTPUT ON;

BEGIN
    -- 1. Hire a new employee
    EmployeeManagement.HireEmployee(101, 'Kavya R', 28000, 20);

    -- 2. Update salary and department
    EmployeeManagement.UpdateEmployee(
        p_emp_id        => 101,
        p_salary        => 30000,
        p_department_id => 30
    );

    -- 3. Print annual salary
    DBMS_OUTPUT.PUT_LINE(
        'Annual salary for Employee 101: â‚¹' ||
        EmployeeManagement.CalcAnnualSalary(101)
    );
END;
/
SELECT * FROM employees;

SELECT * FROM error_log;