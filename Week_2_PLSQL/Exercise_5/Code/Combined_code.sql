CREATE TABLE customers (
    customer_id   NUMBER PRIMARY KEY,
    name          VARCHAR2(100),
    address       VARCHAR2(255),
    phone         VARCHAR2(20),
    lastmodified  DATE
);

-- Accounts table (needed for balance checks)
CREATE TABLE accounts (
    ACCT_ID    NUMBER PRIMARY KEY,
    balance       NUMBER
);

-- Transactions table (one row per deposit/withdrawal)
CREATE TABLE transactions (
    txn_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ACCT_ID  NUMBER,
    txn_type    VARCHAR2(10),  -- 'DEPOSIT' or 'WITHDRAW'
    amount      NUMBER,
    txn_ts      DATE DEFAULT SYSDATE
);


-- Audit log table
CREATE TABLE auditlog (
    audit_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    txn_id        NUMBER,
    ACCT_ID   NUMBER,
    txn_type      VARCHAR2(10),
    amount        NUMBER,
    audit_ts      DATE DEFAULT SYSDATE
);

/*
   SAMPLE DATA
 */
INSERT INTO customers (customer_id, name, address, phone, lastmodified)
VALUES (1001, 'Hethoshna Reddy', 'Hyderabad', '+91‑99999‑99999', SYSDATE);

INSERT INTO accounts (account_no, balance) VALUES (101, 50000);  -- ₹50 000
COMMIT;
/*Scenario -1 UpdateCustomerLastModified*/

DESC customers;
ALTER TABLE customers ADD lastmodified DATE;

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON customers
FOR EACH ROW
BEGIN
    :NEW.lastmodified := SYSDATE;
END UpdateCustomerLastModified;
/
SHOW ERRORS TRIGGER UpdateCustomerLastModified;

/*TRIGGER 2 – LogTransaction*/

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON transactions
FOR EACH ROW
BEGIN
    INSERT INTO auditlog (txn_id,
                          account_no,
                          txn_type,
                          amount)
    VALUES (:NEW.txn_id,
            :NEW.account_no,
            :NEW.txn_type,
            :NEW.amount);
END LogTransaction;
/

/*TRIGGER 3 – CheckTransactionRules*/
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON transactions
FOR EACH ROW
DECLARE
    v_balance  NUMBER;
BEGIN
    IF :NEW.txn_type NOT IN ('DEPOSIT', 'WITHDRAW') THEN
        RAISE_APPLICATION_ERROR(-20500,
            'txn_type must be DEPOSIT or WITHDRAW');
    END IF;

    IF :NEW.amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20501,
            'Amount must be positive');
    END IF;

    /* Fetch current account balance */
    SELECT balance
      INTO v_balance
      FROM accounts
     WHERE ACCT_ID = :NEW.account_no
       FOR UPDATE;

    IF :NEW.txn_type = 'WITHDRAW' AND :NEW.amount > v_balance THEN
        RAISE_APPLICATION_ERROR(-20502,
            'Withdrawal exceeds available balance');
    END IF;

    /* Adjust account balance once rules pass */
    IF :NEW.txn_type = 'DEPOSIT' THEN
        UPDATE accounts
           SET balance = balance + :NEW.amount
         WHERE ACCT_ID = :NEW.account_no;
    ELSE
        UPDATE accounts
           SET balance = balance - :NEW.amount
         WHERE ACCT_ID = :NEW.account_no;
    END IF;
END CheckTransactionRules;
/

SET SERVEROUTPUT ON

UPDATE customers
   SET address = 'Bangalore'
 WHERE customer_id = 1001;

SELECT customer_id, name, address, TO_CHAR(lastmodified, 'DD-MON-YYYY HH24:MI:SS') AS lastmod
FROM customers
WHERE customer_id = 1001;


INSERT INTO transactions (account_no, txn_type, amount)
VALUES (101, 'DEPOSIT', 5000);  
COMMIT;

INSERT INTO transactions (account_no, txn_type, amount)
VALUES (101, 'WITHDRAW', 12000);
COMMIT;

BEGIN
    INSERT INTO transactions (account_no, txn_type, amount)
    VALUES (101, 'WITHDRAW', 100000);  -- too much
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Expected error: ' || SQLERRM);
END;
/
SELECT ACCT_ID, balance FROM accounts WHERE ACCT_ID = 101;

SELECT txn_id,
       account_no,
       txn_type,
       amount,
       TO_CHAR(audit_ts, 'DD-MON-YYYY HH24:MI:SS') AS logged_at
FROM   auditlog
ORDER BY audit_id;

SELECT txn_id,
       account_no,
       txn_type,
       amount,
       TO_CHAR(txn_ts, 'DD-MON-YYYY HH24:MI:SS') AS txn_time
FROM   transactions
ORDER BY txn_id;